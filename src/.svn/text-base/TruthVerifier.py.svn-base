'''
Created on Aug 8, 2011

@author: xli
'''
import getopt
import sys
import logging

from AlterExtractor import AlterUnitExtractor
from DataCollector import InputParser
from DataCollector import PageLoader
from StmtVerifier import Verifier
from MaProcessor import MaExperiments
from MaProcessor import TrustPropagate
from MaProcessor import CorrelationMatrix

sys.path.append('AlterExtractor')
sys.path.append('DataCollector')
sys.path.append('DataStructure')
sys.path.append('Evaluation')
sys.path.append('MaProcessor')
sys.path.append('StmtVerifier')
sys.path.append('TuningProcessor')

# Global Control Options
ex_download = False
ve_download = False
ex_start = -1
ex_end = -1
ve_start = -1
ve_end = -1

ex_tuning_on = False
ve_tuning_on = False
extraction_on = True
verification_on = False
refresh = True

def ProcessOptions(optlist):
    global ex_download
    global ex_start 
    global ex_end
    global ve_download
    global ve_start
    global ve_end

    global ex_tuning_on
    global ve_tuning_on
    global extraction_on
    global verification_on
    global refresh
    
    if len(optlist) >= 1:
        for o, a in optlist:
            if o == '--ex_download' and a == 'on': ex_download = True
            if o == '--ve_download' and a == 'on': ve_download = True
            if o == '--ex_start': ex_start = int(a)
            if o == '--ex_end': ex_end = int(a)
            if o == '--ve_start': ve_start = int(a)
            if o == '--ve_end': ve_end = int(a)
            
            if o == '--ex_tuning' and a == 'on': ex_tuning_on = True
            if o == '--ve_tuning' and a == 'on': ve_tuning_on = True
            
            if o == '--extract' and a == 'on': extraction_on = True
            if o == '--verify' and a == 'on': verification_on = True
            if o == '--refresh' and a == 'on': refresh = True
    return

if __name__ == "__main__":
    logging.basicConfig(level=logging.ERROR)
    try:
        optlist, args = getopt.getopt(sys.argv[1:], "", 
            ['ex_download=', 'ex_start=', 'ex_end=', 've_download=', 've_start=', 've_end=', 
             'ex_tuning=', 've_tuning=', 'extract=', 'verify=', 'refresh='])
        print optlist
        ProcessOptions(optlist)      
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err)
        sys.exit(2)
    
    doubt_objects = InputParser.ParseInputDoubtfulStatement()
    answers = []
    all_cases = []
    for e in doubt_objects: 
        answers.append(e.answers[0])
        all_cases.append(e.docid)
       
    if extraction_on:
        AlterUnitExtractor.ExtractAlterUnits(doubt_objects, ex_download, \
                                             ex_start, ex_end, ex_tuning_on, refresh)
    if verification_on:
        results = Verifier.rankMergeVerify(doubt_objects, ve_download, \
                                 ve_start, ve_end, ve_tuning_on)
        
################################## From here is the multiple answer verification #############################
        
#        matrix_name = ['Gcorr', 'MaxLcorr', 'Lcorr_all', 'Comb']
#        
#        all_matrix_type = [CorrelationMatrix.MatrixType_Gcorr, CorrelationMatrix.MatrixType_MaxLcorr, \
#                           CorrelationMatrix.MatrixType_Lcorr_all_pages, CorrelationMatrix.MatrixType_Comb]
#        
#        ####################### Top-k ####################################
#        print '---------------------------Top k--------------------------------'
#        MaExperiments.TopkExperiment(results, answers, all_cases)
#
#        ####################### Top answer extension ####################################
#        print '----------------------TAE-----------------------------------------'
#        corr_theta = [0.15, 0.35, 0.18, 0.12]
#        for e in all_matrix_type:
#            print matrix_name[e]
#            MaExperiments.TAE_test(results, doubt_objects, answers, e, corr_theta, tuning=False)
#        
#        ####################### Trust propagate   ###################################
#        print '---------------------TP-------------------------------------------'
#        top_option_name = ['LSG', 'LPG', 'FSG']
#        FSG_base = [1.6, 1.3, 1.6, 1.7]
#        top_option = [TrustPropagate.Top_FSG]
#
#        for e in all_matrix_type:
#            print matrix_name[e]
#            for x in top_option:
#                fsg_base = FSG_base[e]
#                print '========================', matrix_name[e], top_option_name[x], '====================='
#                MaExperiments.TP_test(results, doubt_objects, answers, e, \
#                                      TrustPropagate.TM_Comb, x, fsg_base, tuning=False)
#        
#        ####################### Top Group   ####################################
#        print '--------------------TG-------------------------------------------'
#        corr_theta_list = [0.12, 0.43, 0.10, 0.13]
#        
#        for e in all_matrix_type:
#            print matrix_name[e]
#            corr_theta = corr_theta_list[e]
#            MaExperiments.TG_test(results, doubt_objects, answers, e, corr_theta, tuning=False)
#
#        ####################### Top Group with cases ####################################
#        print '---------------------TG with cases-------------------------------------'
#        cc_theta_list = [0.9, 0.64, 0.16, 0.19]
#        mva_theta_list = [0.06, 0.33, 0.1, 0.07]
#        
#        all_matrix_type = [CorrelationMatrix.MatrixType_Gcorr, CorrelationMatrix.MatrixType_MaxLcorr, \
#                           CorrelationMatrix.MatrixType_Lcorr_all_pages, CorrelationMatrix.MatrixType_Comb]
#        for e in all_matrix_type:
#            print matrix_name[e]
#            cc_theta = cc_theta_list[e]
#            mva_theta = mva_theta_list[e]
#            MaExperiments.TG_test_withcase(results, doubt_objects, answers, \
#                                           e, cc_theta, mva_theta, tuning=False)
#        ############################### Top Group w. group correlation########################## 
#        print '------------------TG with group correlation--------------------------------'
#        MaExperiments.TG_group_corr(results, doubt_objects, answers, tuning=False)
#        
#        ############################### Top Group w. synonym correlation #######################
#        print '----------------------TG with synonyms-----------------------------------'
#        MaExperiments.TG_synonym_corr(results, doubt_objects, answers, tuning=False)
#        
#        ############################# TG synonym with case split ##################################
#        print '---------------------------TG with synonyms and cases--------------------------------'
#        cc_theta = 0.19
#        mva_theta = 0.09
#        MaExperiments.TG_synonym_with_cases(results, doubt_objects, answers, CorrelationMatrix.MatrixType_Comb, cc_theta, mva_theta, tuning = False)
        
        